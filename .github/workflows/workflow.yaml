name: Literature Review Helper CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


jobs:
  build-and-push-backend-ci-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to registry
        run: docker login ghcr.io -u ${{ github.actor }} --password-stdin <<<${{ secrets.GITHUB_TOKEN }}
      - name: Build backend CI image
        run: docker build -f ci/backend/Dockerfile -t ghcr.io/${{ github.repository_owner }}/backend-builder:latest .
      - name: Push backend CI image
        run: docker push ghcr.io/${{ github.repository_owner }}/backend-builder:latest
  
  run-static-analysis-backend:
    runs-on: ubuntu-latest
    needs: build-and-push-backend-ci-image
    container:
      image: ghcr.io/${{ github.repository_owner }}/backend-builder:latest
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
        SONAR_PROJECT: ${{ vars.SONAR_PROJECT }}
    steps:
      - name: Run static analysis on backend code
        working-directory: /app
        run: >
          mvn compile test jacoco:report sonar:sonar -B
          -Dsonar.organization=$SONAR_ORGANIZATION
          -Dsonar.projectKey=$SONAR_PROJECT

  build-backend:
    runs-on: ubuntu-latest
    needs: run-static-analysis-backend
    container:
      image: ghcr.io/${{ github.repository_owner }}/backend-builder:latest
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
        SONAR_PROJECT: ${{ vars.SONAR_PROJECT }}
    steps:
      - name: Build backend
        working-directory: /app
        run: mvn clean package -DskipTests -B
      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: /app/src/backend/target/literature-review-helper-0.0.1-SNAPSHOT.jar
          retention-days: 1

  build-and-push-frontend-ci-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to registry
        run: docker login ghcr.io -u ${{ github.actor }} --password-stdin <<<${{ secrets.GITHUB_TOKEN }}
      - name: Build frontend CI image
        run: docker build -f ci/frontend/Dockerfile -t ghcr.io/${{ github.repository_owner }}/frontend-builder:latest .
      - name: Push frontend CI image
        run: docker push ghcr.io/${{ github.repository_owner }}/frontend-builder:latest
  
  build-frontend:
    runs-on: ubuntu-latest
    needs: build-and-push-frontend-ci-image
    container:
      image: ghcr.io/${{ github.repository_owner }}/frontend-builder:latest
    steps:
      - name: Build frontend
        working-directory: /app
        run: npm run build

  build-electron-windows:
    runs-on: windows-latest
    needs: build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json
      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: src/backend/target/
      - name: Install dependencies
        working-directory: src/frontend
        run: npm ci
      - name: Prepare resources
        working-directory: src/frontend
        run: npm run prepare-resources
      - name: Build frontend
        working-directory: src/frontend
        run: npm run build
      - name: Build Electron
        working-directory: src/frontend
        run: npm run electron:build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            src/frontend/dist-electron/*.exe
            src/frontend/dist-electron/*.blockmap
          retention-days: 30

  build-electron-linux:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json
      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: src/backend/target/
      - name: Install dependencies
        working-directory: src/frontend
        run: npm ci
      - name: Prepare resources
        working-directory: src/frontend
        run: npm run prepare-resources
      - name: Build frontend
        working-directory: src/frontend
        run: npm run build
      - name: Build Electron
        working-directory: src/frontend
        run: npm run electron:build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            src/frontend/dist-electron/*.AppImage
            src/frontend/dist-electron/*.deb
          retention-days: 30